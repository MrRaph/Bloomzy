# Bloomzy Project Makefile
# Gestion centralis√©e du projet frontend/backend

.PHONY: help install test lint clean dev build docker-build docker-run setup-dev

# Variables
BACKEND_DIR := backend
FRONTEND_DIR := frontend
BACKEND_PORT := 5001
FRONTEND_PORT := 3000

# Couleurs pour les messages
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(BLUE)Bloomzy Project - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# =============================================================================
# INSTALLATION ET CONFIGURATION
# =============================================================================

install: install-backend install-frontend ## Installe toutes les d√©pendances

install-backend: ## Installe les d√©pendances backend
	@echo "$(YELLOW)Installation des d√©pendances backend...$(NC)"
	cd $(BACKEND_DIR) && make venv
	@echo "$(GREEN)‚úÖ Backend install√© avec succ√®s$(NC)"

install-frontend: ## Installe les d√©pendances frontend
	@echo "$(YELLOW)Installation des d√©pendances frontend...$(NC)"
	cd $(FRONTEND_DIR) && npm install
	@echo "$(GREEN)‚úÖ Frontend install√© avec succ√®s$(NC)"

setup-dev: install ## Configuration compl√®te de l'environnement de d√©veloppement
	@echo "$(BLUE)üöÄ Environnement de d√©veloppement configur√©$(NC)"
	@echo "$(BLUE)Utilisez 'make dev' pour lancer l'application$(NC)"

# =============================================================================
# D√âVELOPPEMENT
# =============================================================================

dev: ## Lance l'application en mode d√©veloppement (backend + frontend)
	@echo "$(BLUE)üöÄ Lancement de l'application Bloomzy...$(NC)"
	@echo "$(YELLOW)Backend: http://localhost:$(BACKEND_PORT)$(NC)"
	@echo "$(YELLOW)Frontend: http://localhost:$(FRONTEND_PORT)$(NC)"
	@echo "$(BLUE)Appuyez sur Ctrl+C pour arr√™ter$(NC)"
	@echo ""
	@$(MAKE) -j2 dev-backend dev-frontend

dev-backend: ## Lance uniquement le backend
	@echo "$(YELLOW)D√©marrage du backend sur le port $(BACKEND_PORT)...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && python -m flask run --host=0.0.0.0 --port=$(BACKEND_PORT)

dev-frontend: ## Lance uniquement le frontend
	@echo "$(YELLOW)D√©marrage du frontend sur le port $(FRONTEND_PORT)...$(NC)"
	cd $(FRONTEND_DIR) && npm run dev

# =============================================================================
# TESTS
# =============================================================================

test: test-backend test-frontend ## Lance tous les tests

test-backend: ## Lance les tests backend
	@echo "$(YELLOW)Ex√©cution des tests backend...$(NC)"
	cd $(BACKEND_DIR) && make test
	@echo "$(GREEN)‚úÖ Tests backend termin√©s$(NC)"

test-frontend: ## Lance les tests frontend
	@echo "$(YELLOW)Ex√©cution des tests frontend...$(NC)"
	cd $(FRONTEND_DIR) && npm test
	@echo "$(GREEN)‚úÖ Tests frontend termin√©s$(NC)"

test-watch: ## Lance les tests en mode watch
	@echo "$(BLUE)Mode watch activ√© - les tests se relancent automatiquement$(NC)"
	@$(MAKE) -j2 test-backend-watch test-frontend-watch

test-backend-watch: ## Lance les tests backend en mode watch
	cd $(BACKEND_DIR) && source .venv/bin/activate && pytest --watch

test-frontend-watch: ## Lance les tests frontend en mode watch
	cd $(FRONTEND_DIR) && npm run test -- --watch

# =============================================================================
# QUALIT√â DU CODE
# =============================================================================

lint: lint-backend lint-frontend ## Lance les linters sur tout le projet

lint-backend: ## Lance le linter backend
	@echo "$(YELLOW)V√©rification du code backend...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && flake8 . || true
	@echo "$(GREEN)‚úÖ Linting backend termin√©$(NC)"

lint-frontend: ## Lance le linter frontend
	@echo "$(YELLOW)V√©rification du code frontend...$(NC)"
	cd $(FRONTEND_DIR) && npm run lint
	@echo "$(GREEN)‚úÖ Linting frontend termin√©$(NC)"

format: format-backend format-frontend ## Formate le code de tout le projet

format-backend: ## Formate le code backend
	@echo "$(YELLOW)Formatage du code backend...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && black . || true
	@echo "$(GREEN)‚úÖ Formatage backend termin√©$(NC)"

format-frontend: ## Formate le code frontend
	@echo "$(YELLOW)Formatage du code frontend...$(NC)"
	cd $(FRONTEND_DIR) && npm run format
	@echo "$(GREEN)‚úÖ Formatage frontend termin√©$(NC)"

# =============================================================================
# BUILD ET D√âPLOIEMENT
# =============================================================================

build: build-backend build-frontend ## Build l'application compl√®te

build-backend: ## Build le backend
	@echo "$(YELLOW)Build du backend...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && python -m pip install --upgrade pip
	@echo "$(GREEN)‚úÖ Backend pr√™t pour la production$(NC)"

build-frontend: ## Build le frontend
	@echo "$(YELLOW)Build du frontend...$(NC)"
	cd $(FRONTEND_DIR) && npm run build
	@echo "$(GREEN)‚úÖ Frontend build√© avec succ√®s$(NC)"

# =============================================================================
# DOCKER
# =============================================================================

docker-build: ## Build les images Docker
	@echo "$(YELLOW)Build des images Docker...$(NC)"
	docker-compose build
	@echo "$(GREEN)‚úÖ Images Docker cr√©√©es$(NC)"

docker-run: ## Lance l'application avec Docker
	@echo "$(BLUE)üê≥ Lancement de l'application avec Docker...$(NC)"
	docker-compose up -d
	@echo "$(GREEN)‚úÖ Application disponible sur http://localhost:$(FRONTEND_PORT)$(NC)"

docker-stop: ## Arr√™te les conteneurs Docker
	@echo "$(YELLOW)Arr√™t des conteneurs Docker...$(NC)"
	docker-compose down
	@echo "$(GREEN)‚úÖ Conteneurs arr√™t√©s$(NC)"

docker-logs: ## Affiche les logs Docker
	docker-compose logs -f

# =============================================================================
# MAINTENANCE
# =============================================================================

clean: clean-backend clean-frontend ## Nettoie les fichiers temporaires

clean-backend: ## Nettoie le backend
	@echo "$(YELLOW)Nettoyage du backend...$(NC)"
	cd $(BACKEND_DIR) && make clean
	@echo "$(GREEN)‚úÖ Backend nettoy√©$(NC)"

clean-frontend: ## Nettoie le frontend
	@echo "$(YELLOW)Nettoyage du frontend...$(NC)"
	cd $(FRONTEND_DIR) && rm -rf node_modules dist .vite
	@echo "$(GREEN)‚úÖ Frontend nettoy√©$(NC)"

reset: clean install ## R√©initialise compl√®tement le projet
	@echo "$(GREEN)üîÑ Projet r√©initialis√©$(NC)"

# =============================================================================
# UTILITAIRES
# =============================================================================

status: ## Affiche l'√©tat du projet
	@echo "$(BLUE)üìä √âtat du projet Bloomzy$(NC)"
	@echo ""
	@echo "$(YELLOW)Backend:$(NC)"
	@if [ -d "$(BACKEND_DIR)/.venv" ]; then \
		echo "  ‚úÖ Environnement virtuel Python configur√©"; \
	else \
		echo "  ‚ùå Environnement virtuel Python manquant"; \
	fi
	@echo ""
	@echo "$(YELLOW)Frontend:$(NC)"
	@if [ -d "$(FRONTEND_DIR)/node_modules" ]; then \
		echo "  ‚úÖ D√©pendances Node.js install√©es"; \
	else \
		echo "  ‚ùå D√©pendances Node.js manquantes"; \
	fi
	@echo ""
	@echo "$(BLUE)Pour installer les d√©pendances: make install$(NC)"
	@echo "$(BLUE)Pour lancer l'application: make dev$(NC)"

logs: ## Affiche les logs de l'application
	@echo "$(BLUE)üìã Logs de l'application$(NC)"
	@echo "$(YELLOW)Pour voir les logs en temps r√©el, utilisez: make dev$(NC)"

# =============================================================================
# D√âVELOPPEMENT SP√âCIFIQUE
# =============================================================================

migrate: ## Lance les migrations de base de donn√©es
	@echo "$(YELLOW)Ex√©cution des migrations...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && flask db upgrade
	@echo "$(GREEN)‚úÖ Migrations appliqu√©es$(NC)"

seed: ## Initialise la base de donn√©es avec des donn√©es de test
	@echo "$(YELLOW)Initialisation des donn√©es de test...$(NC)"
	cd $(BACKEND_DIR) && source .venv/bin/activate && python -c "from app.seed import seed_database; seed_database()"
	@echo "$(GREEN)‚úÖ Donn√©es de test ajout√©es$(NC)"

# =============================================================================
# AIDE RAPIDE
# =============================================================================

quick-start: ## Guide de d√©marrage rapide
	@echo "$(BLUE)üöÄ Guide de d√©marrage rapide Bloomzy$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Installation:$(NC)"
	@echo "   make install"
	@echo ""
	@echo "$(YELLOW)2. Lancement:$(NC)"
	@echo "   make dev"
	@echo ""
	@echo "$(YELLOW)3. Tests:$(NC)"
	@echo "   make test"
	@echo ""
	@echo "$(YELLOW)4. Aide compl√®te:$(NC)"
	@echo "   make help"
	@echo ""
	@echo "$(GREEN)L'application sera disponible sur:$(NC)"
	@echo "  - Frontend: http://localhost:$(FRONTEND_PORT)"
	@echo "  - Backend API: http://localhost:$(BACKEND_PORT)"