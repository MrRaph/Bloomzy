name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run tests
      run: |
        cd frontend
        npm test || echo "Frontend tests not yet implemented"

  build-docker:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      run: |
        docker build -t bloomzy-backend:latest ./backend
    
    - name: Build frontend image
      run: |
        docker build -t bloomzy-frontend:latest ./frontend --build-arg VITE_API_URL=http://localhost:5080
    
    - name: Test Docker images
      run: |
        docker compose -f docker-compose.dev.yml up -d
        sleep 30
        
        # Test backend health
        curl -f http://localhost:5080/health || exit 1
        
        # Test frontend
        curl -f http://localhost:8080 || exit 1
        
        docker compose -f docker-compose.dev.yml down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ DÃ©ploiement en staging"
        # Ici, ajoutez les commandes de dÃ©ploiement vers votre serveur staging
        
  deploy-production:
    needs: [build-docker, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ DÃ©ploiement en production"
        # Ici, ajoutez les commandes de dÃ©ploiement vers votre serveur production